# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetBalanceNotificationOptionsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_1': 'str',
        '_2': 'str',
        '_3': 'str',
        '_5': 'str',
        '_10': 'str',
        '_20': 'str',
        '_30': 'str',
        '_50': 'str',
        '_100': 'str',
        '_500': 'str',
        '_1000': 'str'
    }

    attribute_map = {
        '_1': '1',
        '_2': '2',
        '_3': '3',
        '_5': '5',
        '_10': '10',
        '_20': '20',
        '_30': '30',
        '_50': '50',
        '_100': '100',
        '_500': '500',
        '_1000': '1000'
    }

    def __init__(self, _1=None, _2=None, _3=None, _5=None, _10=None, _20=None, _30=None, _50=None, _100=None, _500=None, _1000=None):  # noqa: E501
        """GetBalanceNotificationOptionsResponse - a model defined in Swagger"""  # noqa: E501

        self.__1 = None
        self.__2 = None
        self.__3 = None
        self.__5 = None
        self.__10 = None
        self.__20 = None
        self.__30 = None
        self.__50 = None
        self.__100 = None
        self.__500 = None
        self.__1000 = None
        self.discriminator = None

        self._1 = _1
        self._2 = _2
        self._3 = _3
        self._5 = _5
        self._10 = _10
        self._20 = _20
        self._30 = _30
        self._50 = _50
        self._100 = _100
        self._500 = _500
        self._1000 = _1000

    @property
    def _1(self):
        """Gets the _1 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _1 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__1

    @_1.setter
    def _1(self, _1):
        """Sets the _1 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _1: The _1 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__1 = _1

    @property
    def _2(self):
        """Gets the _2 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _2 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__2

    @_2.setter
    def _2(self, _2):
        """Sets the _2 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _2: The _2 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__2 = _2

    @property
    def _3(self):
        """Gets the _3 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _3 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__3

    @_3.setter
    def _3(self, _3):
        """Sets the _3 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _3: The _3 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__3 = _3

    @property
    def _5(self):
        """Gets the _5 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _5 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__5

    @_5.setter
    def _5(self, _5):
        """Sets the _5 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _5: The _5 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__5 = _5

    @property
    def _10(self):
        """Gets the _10 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _10 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__10

    @_10.setter
    def _10(self, _10):
        """Sets the _10 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _10: The _10 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__10 = _10

    @property
    def _20(self):
        """Gets the _20 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _20 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__20

    @_20.setter
    def _20(self, _20):
        """Sets the _20 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _20: The _20 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__20 = _20

    @property
    def _30(self):
        """Gets the _30 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _30 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__30

    @_30.setter
    def _30(self, _30):
        """Sets the _30 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _30: The _30 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__30 = _30

    @property
    def _50(self):
        """Gets the _50 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _50 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__50

    @_50.setter
    def _50(self, _50):
        """Sets the _50 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _50: The _50 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__50 = _50

    @property
    def _100(self):
        """Gets the _100 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _100 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__100

    @_100.setter
    def _100(self, _100):
        """Sets the _100 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _100: The _100 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__100 = _100

    @property
    def _500(self):
        """Gets the _500 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _500 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__500

    @_500.setter
    def _500(self, _500):
        """Sets the _500 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _500: The _500 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__500 = _500

    @property
    def _1000(self):
        """Gets the _1000 of this GetBalanceNotificationOptionsResponse.  # noqa: E501

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :return: The _1000 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :rtype: str
        """
        return self.__1000

    @_1000.setter
    def _1000(self, _1000):
        """Sets the _1000 of this GetBalanceNotificationOptionsResponse.

        Contains sign of currency in Unicode hex code.  # noqa: E501

        :param _1000: The _1000 of this GetBalanceNotificationOptionsResponse.  # noqa: E501
        :type: str
        """

        self.__1000 = _1000

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetBalanceNotificationOptionsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBalanceNotificationOptionsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
