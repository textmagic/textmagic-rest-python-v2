# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class List(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'favorited': 'bool',
        'members_count': 'int',
        'user': 'User',
        'service': 'bool',
        'shared': 'bool',
        'avatar': 'ListImage',
        'is_default': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'favorited': 'favorited',
        'members_count': 'membersCount',
        'user': 'user',
        'service': 'service',
        'shared': 'shared',
        'avatar': 'avatar',
        'is_default': 'isDefault'
    }

    def __init__(self, id=None, name=None, description=None, favorited=None, members_count=None, user=None, service=None, shared=None, avatar=None, is_default=None):  # noqa: E501
        """List - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._favorited = None
        self._members_count = None
        self._user = None
        self._service = None
        self._shared = None
        self._avatar = None
        self._is_default = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.description = description
        self.favorited = favorited
        self.members_count = members_count
        self.user = user
        self.service = service
        self.shared = shared
        self.avatar = avatar
        self.is_default = is_default

    @property
    def id(self):
        """Gets the id of this List.  # noqa: E501

        List ID.  # noqa: E501

        :return: The id of this List.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this List.

        List ID.  # noqa: E501

        :param id: The id of this List.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this List.  # noqa: E501

        List name.  # noqa: E501

        :return: The name of this List.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this List.

        List name.  # noqa: E501

        :param name: The name of this List.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this List.  # noqa: E501

        Description of the list.  # noqa: E501

        :return: The description of this List.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this List.

        Description of the list.  # noqa: E501

        :param description: The description of this List.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def favorited(self):
        """Gets the favorited of this List.  # noqa: E501

        Is the List favorited? See [Favorites list](https://docs.textmagic.com/#operation/getFavourites).  # noqa: E501

        :return: The favorited of this List.  # noqa: E501
        :rtype: bool
        """
        return self._favorited

    @favorited.setter
    def favorited(self, favorited):
        """Sets the favorited of this List.

        Is the List favorited? See [Favorites list](https://docs.textmagic.com/#operation/getFavourites).  # noqa: E501

        :param favorited: The favorited of this List.  # noqa: E501
        :type: bool
        """

        self._favorited = favorited

    @property
    def members_count(self):
        """Gets the members_count of this List.  # noqa: E501

        List members count.  # noqa: E501

        :return: The members_count of this List.  # noqa: E501
        :rtype: int
        """
        return self._members_count

    @members_count.setter
    def members_count(self, members_count):
        """Sets the members_count of this List.

        List members count.  # noqa: E501

        :param members_count: The members_count of this List.  # noqa: E501
        :type: int
        """

        self._members_count = members_count

    @property
    def user(self):
        """Gets the user of this List.  # noqa: E501


        :return: The user of this List.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this List.


        :param user: The user of this List.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def service(self):
        """Gets the service of this List.  # noqa: E501

        Internal service field.  # noqa: E501

        :return: The service of this List.  # noqa: E501
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this List.

        Internal service field.  # noqa: E501

        :param service: The service of this List.  # noqa: E501
        :type: bool
        """

        self._service = service

    @property
    def shared(self):
        """Gets the shared of this List.  # noqa: E501

        Is the list **shared** among all sub-accounts?  # noqa: E501

        :return: The shared of this List.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this List.

        Is the list **shared** among all sub-accounts?  # noqa: E501

        :param shared: The shared of this List.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def avatar(self):
        """Gets the avatar of this List.  # noqa: E501


        :return: The avatar of this List.  # noqa: E501
        :rtype: ListImage
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this List.


        :param avatar: The avatar of this List.  # noqa: E501
        :type: ListImage
        """

        self._avatar = avatar

    @property
    def is_default(self):
        """Gets the is_default of this List.  # noqa: E501

        Indicates that List is used as a default. All new contacts added via the Web-app will be added in this List by default.  # noqa: E501

        :return: The is_default of this List.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this List.

        Indicates that List is used as a default. All new contacts added via the Web-app will be added in this List by default.  # noqa: E501

        :param is_default: The is_default of this List.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(List, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, List):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
