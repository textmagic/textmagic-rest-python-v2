# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SenderId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'display_time_format': 'str',
        'sender_id': 'str',
        'user': 'User',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_time_format': 'displayTimeFormat',
        'sender_id': 'senderId',
        'user': 'user',
        'status': 'status'
    }

    def __init__(self, id=None, display_time_format=None, sender_id=None, user=None, status=None):  # noqa: E501
        """SenderId - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._display_time_format = None
        self._sender_id = None
        self._user = None
        self._status = None
        self.discriminator = None

        self.id = id
        if display_time_format is not None:
            self.display_time_format = display_time_format
        self.sender_id = sender_id
        self.user = user
        self.status = status

    @property
    def id(self):
        """Gets the id of this SenderId.  # noqa: E501

        Numeric sender ID.  # noqa: E501

        :return: The id of this SenderId.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SenderId.

        Numeric sender ID.  # noqa: E501

        :param id: The id of this SenderId.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_time_format(self):
        """Gets the display_time_format of this SenderId.  # noqa: E501

        Format for representation of time.  # noqa: E501

        :return: The display_time_format of this SenderId.  # noqa: E501
        :rtype: str
        """
        return self._display_time_format

    @display_time_format.setter
    def display_time_format(self, display_time_format):
        """Sets the display_time_format of this SenderId.

        Format for representation of time.  # noqa: E501

        :param display_time_format: The display_time_format of this SenderId.  # noqa: E501
        :type: str
        """

        self._display_time_format = display_time_format

    @property
    def sender_id(self):
        """Gets the sender_id of this SenderId.  # noqa: E501

        Alphanumeric ID.  # noqa: E501

        :return: The sender_id of this SenderId.  # noqa: E501
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this SenderId.

        Alphanumeric ID.  # noqa: E501

        :param sender_id: The sender_id of this SenderId.  # noqa: E501
        :type: str
        """

        self._sender_id = sender_id

    @property
    def user(self):
        """Gets the user of this SenderId.  # noqa: E501


        :return: The user of this SenderId.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SenderId.


        :param user: The user of this SenderId.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def status(self):
        """Gets the status of this SenderId.  # noqa: E501

        *   **P** for Pending - this Sender ID is being reviewed by our support team; *   **R** for Rejected - our support team rejected your application for this Sender ID; *   **A** for Active.   # noqa: E501

        :return: The status of this SenderId.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SenderId.

        *   **P** for Pending - this Sender ID is being reviewed by our support team; *   **R** for Rejected - our support team rejected your application for this Sender ID; *   **A** for Active.   # noqa: E501

        :param status: The status of this SenderId.  # noqa: E501
        :type: str
        """
        allowed_values = ["A", "R", "P"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SenderId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SenderId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
