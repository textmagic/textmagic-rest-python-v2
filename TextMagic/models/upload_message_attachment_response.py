# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UploadMessageAttachmentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chars': 'int',
        'href': 'str',
        'name': 'str',
        'size': 'int',
        'resource': 'str'
    }

    attribute_map = {
        'chars': 'chars',
        'href': 'href',
        'name': 'name',
        'size': 'size',
        'resource': 'resource'
    }

    def __init__(self, chars=None, href=None, name=None, size=None, resource=None):  # noqa: E501
        """UploadMessageAttachmentResponse - a model defined in Swagger"""  # noqa: E501

        self._chars = None
        self._href = None
        self._name = None
        self._size = None
        self._resource = None
        self.discriminator = None

        self.chars = chars
        self.href = href
        self.name = name
        self.size = size
        self.resource = resource

    @property
    def chars(self):
        """Gets the chars of this UploadMessageAttachmentResponse.  # noqa: E501

        `href` field characters count.   # noqa: E501

        :return: The chars of this UploadMessageAttachmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._chars

    @chars.setter
    def chars(self, chars):
        """Sets the chars of this UploadMessageAttachmentResponse.

        `href` field characters count.   # noqa: E501

        :param chars: The chars of this UploadMessageAttachmentResponse.  # noqa: E501
        :type: int
        """

        self._chars = chars

    @property
    def href(self):
        """Gets the href of this UploadMessageAttachmentResponse.  # noqa: E501

        This is a relative link to your file. To construct a full link, just add “[https://my.textmagic.com/”](https://my.textmagic.com/%E2%80%9D) to the beginning (like this: [https://my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9)). For most modern devices, you can omit the “https://” part and write just [my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9), which will save you 8 characters.   # noqa: E501

        :return: The href of this UploadMessageAttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this UploadMessageAttachmentResponse.

        This is a relative link to your file. To construct a full link, just add “[https://my.textmagic.com/”](https://my.textmagic.com/%E2%80%9D) to the beginning (like this: [https://my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9)). For most modern devices, you can omit the “https://” part and write just [my.textmagic.com/click/Zwcj9](https://my.textmagic.com/click/Zwcj9), which will save you 8 characters.   # noqa: E501

        :param href: The href of this UploadMessageAttachmentResponse.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def name(self):
        """Gets the name of this UploadMessageAttachmentResponse.  # noqa: E501

        File name of the uploaded file.   # noqa: E501

        :return: The name of this UploadMessageAttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadMessageAttachmentResponse.

        File name of the uploaded file.   # noqa: E501

        :param name: The name of this UploadMessageAttachmentResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def size(self):
        """Gets the size of this UploadMessageAttachmentResponse.  # noqa: E501

        Attachment size in bytes.  # noqa: E501

        :return: The size of this UploadMessageAttachmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadMessageAttachmentResponse.

        Attachment size in bytes.  # noqa: E501

        :param size: The size of this UploadMessageAttachmentResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def resource(self):
        """Gets the resource of this UploadMessageAttachmentResponse.  # noqa: E501

        Internal file name  # noqa: E501

        :return: The resource of this UploadMessageAttachmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this UploadMessageAttachmentResponse.

        Internal file name  # noqa: E501

        :param resource: The resource of this UploadMessageAttachmentResponse.  # noqa: E501
        :type: str
        """

        self._resource = resource

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadMessageAttachmentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadMessageAttachmentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
