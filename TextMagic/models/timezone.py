# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Timezone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'area': 'str',
        'dst': 'int',
        'offset': 'int',
        'timezone': 'str'
    }

    attribute_map = {
        'id': 'id',
        'area': 'area',
        'dst': 'dst',
        'offset': 'offset',
        'timezone': 'timezone'
    }

    def __init__(self, id=None, area=None, dst=None, offset=None, timezone=None):  # noqa: E501
        """Timezone - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._area = None
        self._dst = None
        self._offset = None
        self._timezone = None
        self.discriminator = None

        self.id = id
        self.area = area
        self.dst = dst
        self.offset = offset
        self.timezone = timezone

    @property
    def id(self):
        """Gets the id of this Timezone.  # noqa: E501

        Internal timezone ID.  # noqa: E501

        :return: The id of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Timezone.

        Internal timezone ID.  # noqa: E501

        :param id: The id of this Timezone.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def area(self):
        """Gets the area of this Timezone.  # noqa: E501

        Timezone area.  # noqa: E501

        :return: The area of this Timezone.  # noqa: E501
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this Timezone.

        Timezone area.  # noqa: E501

        :param area: The area of this Timezone.  # noqa: E501
        :type: str
        """

        self._area = area

    @property
    def dst(self):
        """Gets the dst of this Timezone.  # noqa: E501

        Is daylight saving time used in this timezone?  # noqa: E501

        :return: The dst of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._dst

    @dst.setter
    def dst(self, dst):
        """Sets the dst of this Timezone.

        Is daylight saving time used in this timezone?  # noqa: E501

        :param dst: The dst of this Timezone.  # noqa: E501
        :type: int
        """

        self._dst = dst

    @property
    def offset(self):
        """Gets the offset of this Timezone.  # noqa: E501

        Offset from UTC time in seconds. In this example, it is 21600/60/60=6 hours.  # noqa: E501

        :return: The offset of this Timezone.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Timezone.

        Offset from UTC time in seconds. In this example, it is 21600/60/60=6 hours.  # noqa: E501

        :param offset: The offset of this Timezone.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def timezone(self):
        """Gets the timezone of this Timezone.  # noqa: E501

        User-friendly timezone name (with spaces replaced by underscores).  # noqa: E501

        :return: The timezone of this Timezone.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Timezone.

        User-friendly timezone name (with spaces replaced by underscores).  # noqa: E501

        :param timezone: The timezone of this Timezone.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Timezone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Timezone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
