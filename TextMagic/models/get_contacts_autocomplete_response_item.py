# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetContactsAutocompleteResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'entity_type': 'str',
        'value': 'str',
        'label': 'str',
        'shared_by': 'str',
        'is_shared': 'bool',
        'avatar': 'str',
        'favorited': 'bool',
        'user_id': 'int',
        'country_name': 'str',
        'qposition': 'int',
        'rposition': 'int'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'value': 'value',
        'label': 'label',
        'shared_by': 'sharedBy',
        'is_shared': 'isShared',
        'avatar': 'avatar',
        'favorited': 'favorited',
        'user_id': 'userId',
        'country_name': 'countryName',
        'qposition': 'qposition',
        'rposition': 'rposition'
    }

    def __init__(self, entity_id=None, entity_type=None, value=None, label=None, shared_by=None, is_shared=None, avatar=None, favorited=None, user_id=None, country_name=None, qposition=None, rposition=None):  # noqa: E501
        """GetContactsAutocompleteResponseItem - a model defined in Swagger"""  # noqa: E501

        self._entity_id = None
        self._entity_type = None
        self._value = None
        self._label = None
        self._shared_by = None
        self._is_shared = None
        self._avatar = None
        self._favorited = None
        self._user_id = None
        self._country_name = None
        self._qposition = None
        self._rposition = None
        self.discriminator = None

        self.entity_id = entity_id
        self.entity_type = entity_type
        self.value = value
        self.label = label
        self.shared_by = shared_by
        self.is_shared = is_shared
        self.avatar = avatar
        self.favorited = favorited
        self.user_id = user_id
        self.country_name = country_name
        self.qposition = qposition
        self.rposition = rposition

    @property
    def entity_id(self):
        """Gets the entity_id of this GetContactsAutocompleteResponseItem.  # noqa: E501

        Id of entity. 0 if object is a reply.  # noqa: E501

        :return: The entity_id of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this GetContactsAutocompleteResponseItem.

        Id of entity. 0 if object is a reply.  # noqa: E501

        :param entity_id: The entity_id of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this GetContactsAutocompleteResponseItem.  # noqa: E501

        Entry type: * **contact** if it is related to a contact; * **list** if it is related to a contact list; * **reply** if it is related to an incoming message.   # noqa: E501

        :return: The entity_type of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this GetContactsAutocompleteResponseItem.

        Entry type: * **contact** if it is related to a contact; * **list** if it is related to a contact list; * **reply** if it is related to an incoming message.   # noqa: E501

        :param entity_type: The entity_type of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["reply", "contact", "list"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def value(self):
        """Gets the value of this GetContactsAutocompleteResponseItem.  # noqa: E501

        ID of the contact/list if entityType is contact/list OR phone number if entityType is reply.  # noqa: E501

        :return: The value of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GetContactsAutocompleteResponseItem.

        ID of the contact/list if entityType is contact/list OR phone number if entityType is reply.  # noqa: E501

        :param value: The value of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def label(self):
        """Gets the label of this GetContactsAutocompleteResponseItem.  # noqa: E501

        Name of the contact/list if entityType is contact/list OR phone number if entityType is reply.  # noqa: E501

        :return: The label of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GetContactsAutocompleteResponseItem.

        Name of the contact/list if entityType is contact/list OR phone number if entityType is reply.  # noqa: E501

        :param label: The label of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def shared_by(self):
        """Gets the shared_by of this GetContactsAutocompleteResponseItem.  # noqa: E501

        If contact or list was shared by another sub-account, the name of this user will be shown.  # noqa: E501

        :return: The shared_by of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._shared_by

    @shared_by.setter
    def shared_by(self, shared_by):
        """Sets the shared_by of this GetContactsAutocompleteResponseItem.

        If contact or list was shared by another sub-account, the name of this user will be shown.  # noqa: E501

        :param shared_by: The shared_by of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """

        self._shared_by = shared_by

    @property
    def is_shared(self):
        """Gets the is_shared of this GetContactsAutocompleteResponseItem.  # noqa: E501

        If contact or list was shared by another sub-account then `true` will be set.  # noqa: E501

        :return: The is_shared of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_shared

    @is_shared.setter
    def is_shared(self, is_shared):
        """Sets the is_shared of this GetContactsAutocompleteResponseItem.

        If contact or list was shared by another sub-account then `true` will be set.  # noqa: E501

        :param is_shared: The is_shared of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: bool
        """

        self._is_shared = is_shared

    @property
    def avatar(self):
        """Gets the avatar of this GetContactsAutocompleteResponseItem.  # noqa: E501

        Contact avatar URI.  # noqa: E501

        :return: The avatar of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this GetContactsAutocompleteResponseItem.

        Contact avatar URI.  # noqa: E501

        :param avatar: The avatar of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def favorited(self):
        """Gets the favorited of this GetContactsAutocompleteResponseItem.  # noqa: E501

        If contact has been marked as favorite.  # noqa: E501

        :return: The favorited of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: bool
        """
        return self._favorited

    @favorited.setter
    def favorited(self, favorited):
        """Sets the favorited of this GetContactsAutocompleteResponseItem.

        If contact has been marked as favorite.  # noqa: E501

        :param favorited: The favorited of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: bool
        """

        self._favorited = favorited

    @property
    def user_id(self):
        """Gets the user_id of this GetContactsAutocompleteResponseItem.  # noqa: E501

        Owner ID of the contact/list (if it was shared).  # noqa: E501

        :return: The user_id of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GetContactsAutocompleteResponseItem.

        Owner ID of the contact/list (if it was shared).  # noqa: E501

        :param user_id: The user_id of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def country_name(self):
        """Gets the country_name of this GetContactsAutocompleteResponseItem.  # noqa: E501


        :return: The country_name of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this GetContactsAutocompleteResponseItem.


        :param country_name: The country_name of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def qposition(self):
        """Gets the qposition of this GetContactsAutocompleteResponseItem.  # noqa: E501


        :return: The qposition of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._qposition

    @qposition.setter
    def qposition(self, qposition):
        """Sets the qposition of this GetContactsAutocompleteResponseItem.


        :param qposition: The qposition of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: int
        """

        self._qposition = qposition

    @property
    def rposition(self):
        """Gets the rposition of this GetContactsAutocompleteResponseItem.  # noqa: E501


        :return: The rposition of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._rposition

    @rposition.setter
    def rposition(self, rposition):
        """Sets the rposition of this GetContactsAutocompleteResponseItem.


        :param rposition: The rposition of this GetContactsAutocompleteResponseItem.  # noqa: E501
        :type: int
        """

        self._rposition = rposition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetContactsAutocompleteResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetContactsAutocompleteResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
