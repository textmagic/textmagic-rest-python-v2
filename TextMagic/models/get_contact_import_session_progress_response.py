# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetContactImportSessionProgressResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'processed': 'int'
    }

    attribute_map = {
        'status': 'status',
        'processed': 'processed'
    }

    def __init__(self, status=None, processed=None):  # noqa: E501
        """GetContactImportSessionProgressResponse - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._processed = None
        self.discriminator = None

        self.status = status
        self.processed = processed

    @property
    def status(self):
        """Gets the status of this GetContactImportSessionProgressResponse.  # noqa: E501

        Session status: * **1** - if session has been initialized but not yet started; * **3** - if session is being processed; * **4** - if session has errors; * **5** - if session completed successfully.   # noqa: E501

        :return: The status of this GetContactImportSessionProgressResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetContactImportSessionProgressResponse.

        Session status: * **1** - if session has been initialized but not yet started; * **3** - if session is being processed; * **4** - if session has errors; * **5** - if session completed successfully.   # noqa: E501

        :param status: The status of this GetContactImportSessionProgressResponse.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def processed(self):
        """Gets the processed of this GetContactImportSessionProgressResponse.  # noqa: E501

        How many contacts have been imported?  # noqa: E501

        :return: The processed of this GetContactImportSessionProgressResponse.  # noqa: E501
        :rtype: int
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this GetContactImportSessionProgressResponse.

        How many contacts have been imported?  # noqa: E501

        :param processed: The processed of this GetContactImportSessionProgressResponse.  # noqa: E501
        :type: int
        """

        self._processed = processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetContactImportSessionProgressResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetContactImportSessionProgressResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
