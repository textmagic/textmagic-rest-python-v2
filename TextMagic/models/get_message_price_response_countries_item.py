# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetMessagePriceResponseCountriesItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'country_name': 'str',
        'allow_dedicated': 'bool',
        'count': 'float',
        'max': 'float',
        'sum': 'str',
        'landline': 'float'
    }

    attribute_map = {
        'country': 'country',
        'country_name': 'countryName',
        'allow_dedicated': 'allowDedicated',
        'count': 'count',
        'max': 'max',
        'sum': 'sum',
        'landline': 'landline'
    }

    def __init__(self, country=None, country_name=None, allow_dedicated=None, count=None, max=None, sum=None, landline=None):  # noqa: E501
        """GetMessagePriceResponseCountriesItem - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._country_name = None
        self._allow_dedicated = None
        self._count = None
        self._max = None
        self._sum = None
        self._landline = None
        self.discriminator = None

        self.country = country
        self.country_name = country_name
        self.allow_dedicated = allow_dedicated
        self.count = count
        self.max = max
        self.sum = sum
        self.landline = landline

    @property
    def country(self):
        """Gets the country of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        The 2-letter ISO country code.  # noqa: E501

        :return: The country of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GetMessagePriceResponseCountriesItem.

        The 2-letter ISO country code.  # noqa: E501

        :param country: The country of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_name(self):
        """Gets the country_name of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Country name.  # noqa: E501

        :return: The country_name of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this GetMessagePriceResponseCountriesItem.

        Country name.  # noqa: E501

        :param country_name: The country_name of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: str
        """

        self._country_name = country_name

    @property
    def allow_dedicated(self):
        """Gets the allow_dedicated of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Is allowed to use a dedicated number?  # noqa: E501

        :return: The allow_dedicated of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: bool
        """
        return self._allow_dedicated

    @allow_dedicated.setter
    def allow_dedicated(self, allow_dedicated):
        """Sets the allow_dedicated of this GetMessagePriceResponseCountriesItem.

        Is allowed to use a dedicated number?  # noqa: E501

        :param allow_dedicated: The allow_dedicated of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: bool
        """

        self._allow_dedicated = allow_dedicated

    @property
    def count(self):
        """Gets the count of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Parts count to send.  # noqa: E501

        :return: The count of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GetMessagePriceResponseCountriesItem.

        Parts count to send.  # noqa: E501

        :param count: The count of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: float
        """

        self._count = count

    @property
    def max(self):
        """Gets the max of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Maximum parts to send.  # noqa: E501

        :return: The max of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this GetMessagePriceResponseCountriesItem.

        Maximum parts to send.  # noqa: E501

        :param max: The max of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def sum(self):
        """Gets the sum of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Total price to send.  # noqa: E501

        :return: The sum of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: str
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this GetMessagePriceResponseCountriesItem.

        Total price to send.  # noqa: E501

        :param sum: The sum of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: str
        """

        self._sum = sum

    @property
    def landline(self):
        """Gets the landline of this GetMessagePriceResponseCountriesItem.  # noqa: E501

        Is this a landline number?  # noqa: E501

        :return: The landline of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :rtype: float
        """
        return self._landline

    @landline.setter
    def landline(self, landline):
        """Sets the landline of this GetMessagePriceResponseCountriesItem.

        Is this a landline number?  # noqa: E501

        :param landline: The landline of this GetMessagePriceResponseCountriesItem.  # noqa: E501
        :type: float
        """

        self._landline = landline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetMessagePriceResponseCountriesItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetMessagePriceResponseCountriesItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
