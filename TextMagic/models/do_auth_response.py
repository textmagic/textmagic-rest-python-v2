# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DoAuthResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'token': 'str',
        'expires': 'datetime',
        'min_versions': 'DoAuthResponseMinVersions',
        'disallowed_rules': 'list[str]'
    }

    attribute_map = {
        'username': 'username',
        'token': 'token',
        'expires': 'expires',
        'min_versions': 'minVersions',
        'disallowed_rules': 'disallowedRules'
    }

    def __init__(self, username=None, token=None, expires=None, min_versions=None, disallowed_rules=None):  # noqa: E501
        """DoAuthResponse - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._token = None
        self._expires = None
        self._min_versions = None
        self._disallowed_rules = None
        self.discriminator = None

        self.username = username
        self.token = token
        self.expires = expires
        self.min_versions = min_versions
        self.disallowed_rules = disallowed_rules

    @property
    def username(self):
        """Gets the username of this DoAuthResponse.  # noqa: E501


        :return: The username of this DoAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DoAuthResponse.


        :param username: The username of this DoAuthResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def token(self):
        """Gets the token of this DoAuthResponse.  # noqa: E501


        :return: The token of this DoAuthResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DoAuthResponse.


        :param token: The token of this DoAuthResponse.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def expires(self):
        """Gets the expires of this DoAuthResponse.  # noqa: E501


        :return: The expires of this DoAuthResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this DoAuthResponse.


        :param expires: The expires of this DoAuthResponse.  # noqa: E501
        :type: datetime
        """

        self._expires = expires

    @property
    def min_versions(self):
        """Gets the min_versions of this DoAuthResponse.  # noqa: E501


        :return: The min_versions of this DoAuthResponse.  # noqa: E501
        :rtype: DoAuthResponseMinVersions
        """
        return self._min_versions

    @min_versions.setter
    def min_versions(self, min_versions):
        """Sets the min_versions of this DoAuthResponse.


        :param min_versions: The min_versions of this DoAuthResponse.  # noqa: E501
        :type: DoAuthResponseMinVersions
        """

        self._min_versions = min_versions

    @property
    def disallowed_rules(self):
        """Gets the disallowed_rules of this DoAuthResponse.  # noqa: E501


        :return: The disallowed_rules of this DoAuthResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._disallowed_rules

    @disallowed_rules.setter
    def disallowed_rules(self, disallowed_rules):
        """Sets the disallowed_rules of this DoAuthResponse.


        :param disallowed_rules: The disallowed_rules of this DoAuthResponse.  # noqa: E501
        :type: list[str]
        """

        self._disallowed_rules = disallowed_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DoAuthResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DoAuthResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
