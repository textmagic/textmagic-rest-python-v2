# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FavoriteContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entity_id': 'int',
        'entity_type': 'str',
        'primary_label': 'str',
        'secondary_label': 'str',
        'tertiary_label': 'str',
        'avatar': 'str'
    }

    attribute_map = {
        'entity_id': 'entityId',
        'entity_type': 'entityType',
        'primary_label': 'primaryLabel',
        'secondary_label': 'secondaryLabel',
        'tertiary_label': 'tertiaryLabel',
        'avatar': 'avatar'
    }

    def __init__(self, entity_id=None, entity_type=None, primary_label=None, secondary_label=None, tertiary_label=None, avatar=None):  # noqa: E501
        """FavoriteContact - a model defined in Swagger"""  # noqa: E501

        self._entity_id = None
        self._entity_type = None
        self._primary_label = None
        self._secondary_label = None
        self._tertiary_label = None
        self._avatar = None
        self.discriminator = None

        self.entity_id = entity_id
        self.entity_type = entity_type
        self.primary_label = primary_label
        self.secondary_label = secondary_label
        self.tertiary_label = tertiary_label
        self.avatar = avatar

    @property
    def entity_id(self):
        """Gets the entity_id of this FavoriteContact.  # noqa: E501

        List or Contact ID.  # noqa: E501

        :return: The entity_id of this FavoriteContact.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this FavoriteContact.

        List or Contact ID.  # noqa: E501

        :param entity_id: The entity_id of this FavoriteContact.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """Gets the entity_type of this FavoriteContact.  # noqa: E501

        Entity type which should be marked as **favorite**.  # noqa: E501

        :return: The entity_type of this FavoriteContact.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this FavoriteContact.

        Entity type which should be marked as **favorite**.  # noqa: E501

        :param entity_type: The entity_type of this FavoriteContact.  # noqa: E501
        :type: str
        """
        allowed_values = ["list", "contact"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"  # noqa: E501
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def primary_label(self):
        """Gets the primary_label of this FavoriteContact.  # noqa: E501

        Contact first name/last name if entityType is **contact**; List name if entity type is **list**.  # noqa: E501

        :return: The primary_label of this FavoriteContact.  # noqa: E501
        :rtype: str
        """
        return self._primary_label

    @primary_label.setter
    def primary_label(self, primary_label):
        """Sets the primary_label of this FavoriteContact.

        Contact first name/last name if entityType is **contact**; List name if entity type is **list**.  # noqa: E501

        :param primary_label: The primary_label of this FavoriteContact.  # noqa: E501
        :type: str
        """

        self._primary_label = primary_label

    @property
    def secondary_label(self):
        """Gets the secondary_label of this FavoriteContact.  # noqa: E501

        Phone number if entityType is **contact**; List contacts number if entity type is **list**.  # noqa: E501

        :return: The secondary_label of this FavoriteContact.  # noqa: E501
        :rtype: str
        """
        return self._secondary_label

    @secondary_label.setter
    def secondary_label(self, secondary_label):
        """Sets the secondary_label of this FavoriteContact.

        Phone number if entityType is **contact**; List contacts number if entity type is **list**.  # noqa: E501

        :param secondary_label: The secondary_label of this FavoriteContact.  # noqa: E501
        :type: str
        """

        self._secondary_label = secondary_label

    @property
    def tertiary_label(self):
        """Gets the tertiary_label of this FavoriteContact.  # noqa: E501

        Contact country if entityType is **contact**; else, null.  # noqa: E501

        :return: The tertiary_label of this FavoriteContact.  # noqa: E501
        :rtype: str
        """
        return self._tertiary_label

    @tertiary_label.setter
    def tertiary_label(self, tertiary_label):
        """Sets the tertiary_label of this FavoriteContact.

        Contact country if entityType is **contact**; else, null.  # noqa: E501

        :param tertiary_label: The tertiary_label of this FavoriteContact.  # noqa: E501
        :type: str
        """

        self._tertiary_label = tertiary_label

    @property
    def avatar(self):
        """Gets the avatar of this FavoriteContact.  # noqa: E501


        :return: The avatar of this FavoriteContact.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this FavoriteContact.


        :param avatar: The avatar of this FavoriteContact.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FavoriteContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FavoriteContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
