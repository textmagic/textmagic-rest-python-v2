# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateContactInputObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'str',
        'email': 'str',
        'company_name': 'str',
        'lists': 'str',
        'favorited': 'bool',
        'blocked': 'bool',
        'type': 'int',
        'custom_field_values': 'list[CustomFieldListItem]',
        'local': 'int',
        'country': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone': 'phone',
        'email': 'email',
        'company_name': 'companyName',
        'lists': 'lists',
        'favorited': 'favorited',
        'blocked': 'blocked',
        'type': 'type',
        'custom_field_values': 'customFieldValues',
        'local': 'local',
        'country': 'country'
    }

    def __init__(self, first_name=None, last_name=None, phone=None, email=None, company_name=None, lists=None, favorited=None, blocked=None, type=None, custom_field_values=None, local=None, country=None):  # noqa: E501
        """CreateContactInputObject - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._phone = None
        self._email = None
        self._company_name = None
        self._lists = None
        self._favorited = None
        self._blocked = None
        self._type = None
        self._custom_field_values = None
        self._local = None
        self._country = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if company_name is not None:
            self.company_name = company_name
        if lists is not None:
            self.lists = lists
        if favorited is not None:
            self.favorited = favorited
        if blocked is not None:
            self.blocked = blocked
        if type is not None:
            self.type = type
        if custom_field_values is not None:
            self.custom_field_values = custom_field_values
        if local is not None:
            self.local = local
        if country is not None:
            self.country = country

    @property
    def first_name(self):
        """Gets the first_name of this CreateContactInputObject.  # noqa: E501

        Contact first name.  # noqa: E501

        :return: The first_name of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateContactInputObject.

        Contact first name.  # noqa: E501

        :param first_name: The first_name of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateContactInputObject.  # noqa: E501

        Contact last name.  # noqa: E501

        :return: The last_name of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateContactInputObject.

        Contact last name.  # noqa: E501

        :param last_name: The last_name of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this CreateContactInputObject.  # noqa: E501

        Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).  # noqa: E501

        :return: The phone of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateContactInputObject.

        Phone number in [E.164 format](https://en.wikipedia.org/wiki/E.164).  # noqa: E501

        :param phone: The phone of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this CreateContactInputObject.  # noqa: E501

        Contact email address.  # noqa: E501

        :return: The email of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateContactInputObject.

        Contact email address.  # noqa: E501

        :param email: The email of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def company_name(self):
        """Gets the company_name of this CreateContactInputObject.  # noqa: E501

        Company name.  # noqa: E501

        :return: The company_name of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CreateContactInputObject.

        Company name.  # noqa: E501

        :param company_name: The company_name of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def lists(self):
        """Gets the lists of this CreateContactInputObject.  # noqa: E501

        Contact [list](https://docs.textmagic.com/#tag/Lists) ID. Each contact must be assigned to at least one list.  # noqa: E501

        :return: The lists of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._lists

    @lists.setter
    def lists(self, lists):
        """Sets the lists of this CreateContactInputObject.

        Contact [list](https://docs.textmagic.com/#tag/Lists) ID. Each contact must be assigned to at least one list.  # noqa: E501

        :param lists: The lists of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._lists = lists

    @property
    def favorited(self):
        """Gets the favorited of this CreateContactInputObject.  # noqa: E501

        Is the contact marked as favorite?  # noqa: E501

        :return: The favorited of this CreateContactInputObject.  # noqa: E501
        :rtype: bool
        """
        return self._favorited

    @favorited.setter
    def favorited(self, favorited):
        """Sets the favorited of this CreateContactInputObject.

        Is the contact marked as favorite?  # noqa: E501

        :param favorited: The favorited of this CreateContactInputObject.  # noqa: E501
        :type: bool
        """

        self._favorited = favorited

    @property
    def blocked(self):
        """Gets the blocked of this CreateContactInputObject.  # noqa: E501

        Is the contact blocked for outgoing and incoming messaging?  # noqa: E501

        :return: The blocked of this CreateContactInputObject.  # noqa: E501
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this CreateContactInputObject.

        Is the contact blocked for outgoing and incoming messaging?  # noqa: E501

        :param blocked: The blocked of this CreateContactInputObject.  # noqa: E501
        :type: bool
        """

        self._blocked = blocked

    @property
    def type(self):
        """Gets the type of this CreateContactInputObject.  # noqa: E501

        Force type of phone. Possible values: 0 is landline; 1 is mobile; default is -1 (auto-detection).  # noqa: E501

        :return: The type of this CreateContactInputObject.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateContactInputObject.

        Force type of phone. Possible values: 0 is landline; 1 is mobile; default is -1 (auto-detection).  # noqa: E501

        :param type: The type of this CreateContactInputObject.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def custom_field_values(self):
        """Gets the custom_field_values of this CreateContactInputObject.  # noqa: E501


        :return: The custom_field_values of this CreateContactInputObject.  # noqa: E501
        :rtype: list[CustomFieldListItem]
        """
        return self._custom_field_values

    @custom_field_values.setter
    def custom_field_values(self, custom_field_values):
        """Sets the custom_field_values of this CreateContactInputObject.


        :param custom_field_values: The custom_field_values of this CreateContactInputObject.  # noqa: E501
        :type: list[CustomFieldListItem]
        """

        self._custom_field_values = custom_field_values

    @property
    def local(self):
        """Gets the local of this CreateContactInputObject.  # noqa: E501

        Treat phone numbers passed in the request body as local.  # noqa: E501

        :return: The local of this CreateContactInputObject.  # noqa: E501
        :rtype: int
        """
        return self._local

    @local.setter
    def local(self, local):
        """Sets the local of this CreateContactInputObject.

        Treat phone numbers passed in the request body as local.  # noqa: E501

        :param local: The local of this CreateContactInputObject.  # noqa: E501
        :type: int
        """

        self._local = local

    @property
    def country(self):
        """Gets the country of this CreateContactInputObject.  # noqa: E501

        The 2-letter ISO country code for local phone numbers, used when local is  set to true. Default is the account country.  # noqa: E501

        :return: The country of this CreateContactInputObject.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateContactInputObject.

        The 2-letter ISO country code for local phone numbers, used when local is  set to true. Default is the account country.  # noqa: E501

        :param country: The country of this CreateContactInputObject.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateContactInputObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateContactInputObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
