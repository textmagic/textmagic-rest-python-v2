# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        '_date': 'datetime',
        'balance': 'float',
        'delta': 'float',
        'type': 'str',
        'value': 'str',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        '_date': 'date',
        'balance': 'balance',
        'delta': 'delta',
        'type': 'type',
        'value': 'value',
        'comment': 'comment'
    }

    def __init__(self, id=None, user_id=None, _date=None, balance=None, delta=None, type=None, value=None, comment=None):  # noqa: E501
        """UserStatement - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_id = None
        self.__date = None
        self._balance = None
        self._delta = None
        self._type = None
        self._value = None
        self._comment = None
        self.discriminator = None

        self.id = id
        self.user_id = user_id
        self._date = _date
        self.balance = balance
        self.delta = delta
        self.type = type
        self.value = value
        self.comment = comment

    @property
    def id(self):
        """Gets the id of this UserStatement.  # noqa: E501

        User statement ID.  # noqa: E501

        :return: The id of this UserStatement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserStatement.

        User statement ID.  # noqa: E501

        :param id: The id of this UserStatement.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this UserStatement.  # noqa: E501

        User ID.  # noqa: E501

        :return: The user_id of this UserStatement.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserStatement.

        User ID.  # noqa: E501

        :param user_id: The user_id of this UserStatement.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def _date(self):
        """Gets the _date of this UserStatement.  # noqa: E501

        User statement date.  # noqa: E501

        :return: The _date of this UserStatement.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this UserStatement.

        User statement date.  # noqa: E501

        :param _date: The _date of this UserStatement.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def balance(self):
        """Gets the balance of this UserStatement.  # noqa: E501


        :return: The balance of this UserStatement.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this UserStatement.


        :param balance: The balance of this UserStatement.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def delta(self):
        """Gets the delta of this UserStatement.  # noqa: E501

        Balance change amount.  # noqa: E501

        :return: The delta of this UserStatement.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this UserStatement.

        Balance change amount.  # noqa: E501

        :param delta: The delta of this UserStatement.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def type(self):
        """Gets the type of this UserStatement.  # noqa: E501

        Type of statement (what you have been charged for): *   **sms** - for sending SMS *   **number** - for renewing a dedicated number; *   **schedule** - for scheduling text messages; *   **topup** - for adding credits to your account.   # noqa: E501

        :return: The type of this UserStatement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserStatement.

        Type of statement (what you have been charged for): *   **sms** - for sending SMS *   **number** - for renewing a dedicated number; *   **schedule** - for scheduling text messages; *   **topup** - for adding credits to your account.   # noqa: E501

        :param type: The type of this UserStatement.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this UserStatement.  # noqa: E501

        Value differs by **type**: *   for **sms**, it is the sent messages amount; *   for **number**, it is a dedicated phone number; *   for **schedule**, it is a scheduled messages amount; *   for **top-up**, it is an invoice ID.   # noqa: E501

        :return: The value of this UserStatement.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this UserStatement.

        Value differs by **type**: *   for **sms**, it is the sent messages amount; *   for **number**, it is a dedicated phone number; *   for **schedule**, it is a scheduled messages amount; *   for **top-up**, it is an invoice ID.   # noqa: E501

        :param value: The value of this UserStatement.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def comment(self):
        """Gets the comment of this UserStatement.  # noqa: E501

        Optional comment.  # noqa: E501

        :return: The comment of this UserStatement.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UserStatement.

        Optional comment.  # noqa: E501

        :param comment: The comment of this UserStatement.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserStatement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
