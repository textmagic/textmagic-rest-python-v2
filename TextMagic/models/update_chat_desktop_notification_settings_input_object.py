# coding: utf-8

"""
    TextMagic API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateChatDesktopNotificationSettingsInputObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'play_sound': 'bool',
        'show_notifications': 'bool',
        'show_text': 'bool',
        'sound_id': 'int'
    }

    attribute_map = {
        'play_sound': 'playSound',
        'show_notifications': 'showNotifications',
        'show_text': 'showText',
        'sound_id': 'soundId'
    }

    def __init__(self, play_sound=None, show_notifications=None, show_text=None, sound_id=None):  # noqa: E501
        """UpdateChatDesktopNotificationSettingsInputObject - a model defined in Swagger"""  # noqa: E501

        self._play_sound = None
        self._show_notifications = None
        self._show_text = None
        self._sound_id = None
        self.discriminator = None

        if play_sound is not None:
            self.play_sound = play_sound
        if show_notifications is not None:
            self.show_notifications = show_notifications
        if show_text is not None:
            self.show_text = show_text
        if sound_id is not None:
            self.sound_id = sound_id

    @property
    def play_sound(self):
        """Gets the play_sound of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501

        Enable notification sound?  # noqa: E501

        :return: The play_sound of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :rtype: bool
        """
        return self._play_sound

    @play_sound.setter
    def play_sound(self, play_sound):
        """Sets the play_sound of this UpdateChatDesktopNotificationSettingsInputObject.

        Enable notification sound?  # noqa: E501

        :param play_sound: The play_sound of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :type: bool
        """

        self._play_sound = play_sound

    @property
    def show_notifications(self):
        """Gets the show_notifications of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501

        Show desktop notifications about new messages.  # noqa: E501

        :return: The show_notifications of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :rtype: bool
        """
        return self._show_notifications

    @show_notifications.setter
    def show_notifications(self, show_notifications):
        """Sets the show_notifications of this UpdateChatDesktopNotificationSettingsInputObject.

        Show desktop notifications about new messages.  # noqa: E501

        :param show_notifications: The show_notifications of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :type: bool
        """

        self._show_notifications = show_notifications

    @property
    def show_text(self):
        """Gets the show_text of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501

        Incoming message text will be displayed in desktop notifications.  # noqa: E501

        :return: The show_text of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :rtype: bool
        """
        return self._show_text

    @show_text.setter
    def show_text(self, show_text):
        """Sets the show_text of this UpdateChatDesktopNotificationSettingsInputObject.

        Incoming message text will be displayed in desktop notifications.  # noqa: E501

        :param show_text: The show_text of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :type: bool
        """

        self._show_text = show_text

    @property
    def sound_id(self):
        """Gets the sound_id of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501

        Sound Id of a notification.  # noqa: E501

        :return: The sound_id of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :rtype: int
        """
        return self._sound_id

    @sound_id.setter
    def sound_id(self, sound_id):
        """Sets the sound_id of this UpdateChatDesktopNotificationSettingsInputObject.

        Sound Id of a notification.  # noqa: E501

        :param sound_id: The sound_id of this UpdateChatDesktopNotificationSettingsInputObject.  # noqa: E501
        :type: int
        """

        self._sound_id = sound_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateChatDesktopNotificationSettingsInputObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateChatDesktopNotificationSettingsInputObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
